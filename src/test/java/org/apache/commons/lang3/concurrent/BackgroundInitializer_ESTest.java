/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 11:11:04 GMT 2023
 */

package org.apache.commons.lang3.concurrent;

import org.evosuite.shaded.org.mockito.stubbing.Answer;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BackgroundInitializer_ESTest extends BackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      backgroundInitializer0.start();
      boolean boolean0 = backgroundInitializer0.isStarted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      int int0 = backgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Callable<Exception> callable0 = (Callable<Exception>) mock(Callable.class, (Answer) new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1, 363L, timeUnit0, priorityBlockingQueue0, threadPoolExecutor_DiscardPolicy0);
      CallableBackgroundInitializer<Exception> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Exception>(callable0, threadPoolExecutor0);
      ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor();
      assertSame(executorService0, threadPoolExecutor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      backgroundInitializer0.start();
      ExecutorService executorService0 = backgroundInitializer0.getActiveExecutor();
      assertNotNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      backgroundInitializer0.start();
      Exception exception0 = backgroundInitializer0.get();
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      // Undeclared exception!
      try { 
        backgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>();
      backgroundInitializer0.start();
      backgroundInitializer0.close();
      backgroundInitializer0.getFuture();
      BackgroundInitializer<Exception> backgroundInitializer1 = new BackgroundInitializer<Exception>();
      assertFalse(backgroundInitializer1.isStarted());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>(forkJoinPool0);
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, (Answer) new ViolatedAssumptionAnswer());
      backgroundInitializer0.setExternalExecutor(forkJoinPool0);
      String string0 = "FqIw<1'$";
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Callable<Exception> callable0 = (Callable<Exception>) mock(Callable.class, (Answer) new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Exception> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Exception>(callable0);
      BackgroundInitializer.builder();
      callableBackgroundInitializer0.isStarted();
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>();
      assertFalse(backgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BackgroundInitializer.builder();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, (Answer) new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>(forkJoinPool0);
      boolean boolean0 = backgroundInitializer0.start();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>();
      backgroundInitializer0.start();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        backgroundInitializer0.setExternalExecutor(forkJoinPool0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, (Answer) new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.start();
      assertTrue(callableBackgroundInitializer0.isStarted());
      
      BackgroundInitializer.Builder<BackgroundInitializer<Object>, Object> backgroundInitializer_Builder0 = new BackgroundInitializer.Builder<BackgroundInitializer<Object>, Object>();
      callableBackgroundInitializer0.get();
      boolean boolean0 = callableBackgroundInitializer0.isInitialized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, (Answer) new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.start();
      boolean boolean0 = callableBackgroundInitializer0.isInitialized();
      assertTrue(callableBackgroundInitializer0.isStarted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, (Answer) new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.close();
      BackgroundInitializer<Exception> backgroundInitializer1 = new BackgroundInitializer<Exception>();
      assertFalse(backgroundInitializer1.isStarted());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BackgroundInitializer.builder();
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      ExecutorService executorService0 = backgroundInitializer0.getExternalExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      ExecutorService executorService0 = backgroundInitializer0.getActiveExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      MockException mockException0 = new MockException();
      Exception exception0 = backgroundInitializer0.getTypedException(mockException0);
      assertNotSame(mockException0, exception0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>();
      backgroundInitializer0.start();
      boolean boolean0 = backgroundInitializer0.start();
      assertTrue(backgroundInitializer0.isStarted());
      assertFalse(boolean0);
  }
}
