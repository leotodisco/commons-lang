/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 08 11:14:35 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.util.Collection;
import java.util.function.Predicate;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadUtils_ESTest extends ThreadUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      Duration duration0 = Duration.ofMillis(2145L);
      ThreadUtils.join(mockThread0, duration0);
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.ofNanos((-1557L));
      // Undeclared exception!
      try { 
        ThreadUtils.sleepQuietly(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(1L, (-1L));
      // Undeclared exception!
      try { 
        ThreadUtils.join((Thread) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-1871L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(261L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadGroupName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      ThreadUtils.findThreads(threadGroup0, false, predicate0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(1414L);
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockThread mockThread0 = new MockThread("'D%}D#rJy!Dmc");
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) mockThread0);
      Collection<ThreadGroup> collection0 = ThreadUtils.findThreadGroups(predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      Collection<Thread> collection0 = ThreadUtils.findThreads(predicate0);
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<ThreadGroup> predicate1 = Predicate.isEqual((Object) collection0);
      ThreadUtils.findThreadGroups(threadGroup0, true, predicate1);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(1L);
      ThreadUtils.sleep(duration0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(2008L, "");
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(1L, "0x");
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Collection<Thread> collection0 = ThreadUtils.getAllThreads();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Collection<Thread> collection0 = ThreadUtils.findThreadsByName("");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Thread thread0 = ThreadUtils.findThreadById(1414L, threadGroup0);
      assertEquals("system", threadGroup0.getName());
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Collection<ThreadGroup> collection0 = ThreadUtils.findThreadGroupsByName("");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Collection<Thread> collection0 = ThreadUtils.findThreadsByName("SF+m06A6/K", "_J&");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Collection<ThreadGroup> collection0 = ThreadUtils.getAllThreadGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      ThreadUtils.sleepQuietly(duration0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName("", threadGroup0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockThread mockThread0 = new MockThread("'D%}D#rJy!Dmc");
      Duration duration0 = Duration.ofMinutes((-1870L));
      // Undeclared exception!
      try { 
        ThreadUtils.join(mockThread0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }
}
